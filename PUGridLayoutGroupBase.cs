

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class PUGridLayoutGroup : PUGridLayoutGroupBase {
	
	public PUGridLayoutGroup()
	{
		string attr;

		attr = "100,100";
		if(attr != null) { cellSize = new Vector2().PUParse(attr); cellSizeExists = true; } 
		attr = "0,0";
		if(attr != null) { spacing = new Vector2().PUParse(attr); spacingExists = true; } 

	}
	
	
	public PUGridLayoutGroup(
			Vector2 cellSize,
			Vector2 spacing,
			PlanetUnity2.GridLayoutStartCorner startCorner,
			PlanetUnity2.GridLayoutStartAxis startAxis,
			PlanetUnity2.GridLayoutChildAlignment childAlignment,
			int fixedRows,
			int fixedColumns ) : this()
	{
		this.cellSize = cellSize;
		this.cellSizeExists = true;

		this.spacing = spacing;
		this.spacingExists = true;

		this.startCorner = startCorner;
		this.startCornerExists = true;

		this.startAxis = startAxis;
		this.startAxisExists = true;

		this.childAlignment = childAlignment;
		this.childAlignmentExists = true;

		this.fixedRows = fixedRows;
		this.fixedRowsExists = true;

		this.fixedColumns = fixedColumns;
		this.fixedColumnsExists = true;
	}

	
	
	public PUGridLayoutGroup(
			Vector2 cellSize,
			Vector2 spacing,
			PlanetUnity2.GridLayoutStartCorner startCorner,
			PlanetUnity2.GridLayoutStartAxis startAxis,
			PlanetUnity2.GridLayoutChildAlignment childAlignment,
			int fixedRows,
			int fixedColumns,
			Vector4 bounds,
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool active,
			bool mask,
			bool outline,
			float lastY,
			float lastX,
			string shader,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.cellSize = cellSize;
		this.cellSizeExists = true;

		this.spacing = spacing;
		this.spacingExists = true;

		this.startCorner = startCorner;
		this.startCornerExists = true;

		this.startAxis = startAxis;
		this.startAxisExists = true;

		this.childAlignment = childAlignment;
		this.childAlignmentExists = true;

		this.fixedRows = fixedRows;
		this.fixedRowsExists = true;

		this.fixedColumns = fixedColumns;
		this.fixedColumnsExists = true;

		this.bounds = bounds;
		this.boundsExists = true;

		this.position = position;
		this.positionExists = true;

		this.size = size;
		this.sizeExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.scale = scale;
		this.scaleExists = true;

		this.pivot = pivot;
		this.pivotExists = true;

		this.anchor = anchor;
		this.anchorExists = true;

		this.active = active;
		this.activeExists = true;

		this.mask = mask;
		this.maskExists = true;

		this.outline = outline;
		this.outlineExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.shader = shader;
		this.shaderExists = true;

		this.title = title;
		this.titleExists = true;

		this.tag = tag;
		this.tagExists = true;

		this.tag1 = tag1;
		this.tag1Exists = true;

		this.tag2 = tag2;
		this.tag2Exists = true;

		this.tag3 = tag3;
		this.tag3Exists = true;

		this.tag4 = tag4;
		this.tag4Exists = true;

		this.tag5 = tag5;
		this.tag5Exists = true;

		this.tag6 = tag6;
		this.tag6Exists = true;
	}


}




public class PUGridLayoutGroupBase : PUGameObject {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);




	// XML Attributes
	public Vector2 cellSize;
	public bool cellSizeExists;

	public Vector2 spacing;
	public bool spacingExists;

	public PlanetUnity2.GridLayoutStartCorner startCorner;
	public bool startCornerExists;

	public PlanetUnity2.GridLayoutStartAxis startAxis;
	public bool startAxisExists;

	public PlanetUnity2.GridLayoutChildAlignment childAlignment;
	public bool childAlignmentExists;

	public int fixedRows;
	public bool fixedRowsExists;

	public int fixedColumns;
	public bool fixedColumnsExists;




	
	public void SetCellSize(Vector2 v) { cellSize = v; cellSizeExists = true; } 
	public void SetSpacing(Vector2 v) { spacing = v; spacingExists = true; } 
	public void SetStartCorner(PlanetUnity2.GridLayoutStartCorner v) { startCorner = v; startCornerExists = true; } 
	public void SetStartAxis(PlanetUnity2.GridLayoutStartAxis v) { startAxis = v; startAxisExists = true; } 
	public void SetChildAlignment(PlanetUnity2.GridLayoutChildAlignment v) { childAlignment = v; childAlignmentExists = true; } 
	public void SetFixedRows(int v) { fixedRows = v; fixedRowsExists = true; } 
	public void SetFixedColumns(int v) { fixedColumns = v; fixedColumnsExists = true; } 


	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("GridLayoutGroup");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("GridLayoutGroupExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("GridLayoutGroups");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("GameObjects");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public override void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{
		base.gaxb_load(reader, _parent, args);

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( PUGridLayoutGroup ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("cellSize");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "100,100"; }
		if(attr != null) { cellSize = new Vector2().PUParse(attr); cellSizeExists = true; } 
		
		attr = reader.GetAttribute("spacing");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0"; }
		if(attr != null) { spacing = new Vector2().PUParse(attr); spacingExists = true; } 
		
		attr = reader.GetAttribute("startCorner");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { startCorner = (PlanetUnity2.GridLayoutStartCorner)System.Enum.Parse(typeof(PlanetUnity2.GridLayoutStartCorner), attr); startCornerExists = true; } 
		
		attr = reader.GetAttribute("startAxis");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { startAxis = (PlanetUnity2.GridLayoutStartAxis)System.Enum.Parse(typeof(PlanetUnity2.GridLayoutStartAxis), attr); startAxisExists = true; } 
		
		attr = reader.GetAttribute("childAlignment");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { childAlignment = (PlanetUnity2.GridLayoutChildAlignment)System.Enum.Parse(typeof(PlanetUnity2.GridLayoutChildAlignment), attr); childAlignmentExists = true; } 
		
		attr = reader.GetAttribute("fixedRows");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { fixedRows = int.Parse(attr); fixedRowsExists = true; } 
		
		attr = reader.GetAttribute("fixedColumns");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { fixedColumns = int.Parse(attr); fixedColumnsExists = true; } 
		

	}
	
	
	
	
	
	
	
	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(cellSizeExists) { sb.AppendFormat (" {0}=\"{1}\"", "cellSize", cellSize); }
		if(spacingExists) { sb.AppendFormat (" {0}=\"{1}\"", "spacing", spacing); }
		if(startCornerExists) { sb.AppendFormat (" {0}=\"{1}\"", "startCorner", (int)startCorner); }
		if(startAxisExists) { sb.AppendFormat (" {0}=\"{1}\"", "startAxis", (int)startAxis); }
		if(childAlignmentExists) { sb.AppendFormat (" {0}=\"{1}\"", "childAlignment", (int)childAlignment); }
		if(fixedRowsExists) { sb.AppendFormat (" {0}=\"{1}\"", "fixedRows", fixedRows); }
		if(fixedColumnsExists) { sb.AppendFormat (" {0}=\"{1}\"", "fixedColumns", fixedColumns); }

	}
	
	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}
	
	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "GridLayoutGroup");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "GridLayoutGroup");
		}
	}
}
