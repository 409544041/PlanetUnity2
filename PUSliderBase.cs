

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class PUSlider : PUSliderBase {
	
	public PUSlider()
	{
		string attr;

		attr = "32,32";
		if(attr != null) { handleSize = new Vector2().PUParse(attr); handleSizeExists = true; } 
		attr = "0";
		if(attr != null) { minValue = float.Parse(attr); minValueExists = true; } 
		attr = "1";
		if(attr != null) { maxValue = float.Parse(attr); maxValueExists = true; } 

	}
	
	
	public PUSlider(
			string handleResourcePath,
			Vector2 handleSize,
			string fillResourcePath,
			string onValueChanged,
			float minValue,
			float maxValue,
			PlanetUnity2.SliderDirection direction,
			string resourcePath ) : this()
	{
		this.handleResourcePath = handleResourcePath;
		this.handleResourcePathExists = true;

		this.handleSize = handleSize;
		this.handleSizeExists = true;

		this.fillResourcePath = fillResourcePath;
		this.fillResourcePathExists = true;

		this.onValueChanged = onValueChanged;
		this.onValueChangedExists = true;

		this.minValue = minValue;
		this.minValueExists = true;

		this.maxValue = maxValue;
		this.maxValueExists = true;

		this.direction = direction;
		this.directionExists = true;

		this.resourcePath = resourcePath;
		this.resourcePathExists = true;
	}

	
	
	public PUSlider(
			string handleResourcePath,
			Vector2 handleSize,
			string fillResourcePath,
			string onValueChanged,
			float minValue,
			float maxValue,
			PlanetUnity2.SliderDirection direction,
			string resourcePath,
			Color color,
			PlanetUnity2.ImageType type,
			Vector4 bounds,
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool active,
			bool mask,
			bool outline,
			float lastY,
			float lastX,
			string shader,
			bool ignoreMouse,
			string components,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.handleResourcePath = handleResourcePath;
		this.handleResourcePathExists = true;

		this.handleSize = handleSize;
		this.handleSizeExists = true;

		this.fillResourcePath = fillResourcePath;
		this.fillResourcePathExists = true;

		this.onValueChanged = onValueChanged;
		this.onValueChangedExists = true;

		this.minValue = minValue;
		this.minValueExists = true;

		this.maxValue = maxValue;
		this.maxValueExists = true;

		this.direction = direction;
		this.directionExists = true;

		this.resourcePath = resourcePath;
		this.resourcePathExists = true;

		this.color = color;
		this.colorExists = true;

		this.type = type;
		this.typeExists = true;

		this.bounds = bounds;
		this.boundsExists = true;

		this.position = position;
		this.positionExists = true;

		this.size = size;
		this.sizeExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.scale = scale;
		this.scaleExists = true;

		this.pivot = pivot;
		this.pivotExists = true;

		this.anchor = anchor;
		this.anchorExists = true;

		this.active = active;
		this.activeExists = true;

		this.mask = mask;
		this.maskExists = true;

		this.outline = outline;
		this.outlineExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.shader = shader;
		this.shaderExists = true;

		this.ignoreMouse = ignoreMouse;
		this.ignoreMouseExists = true;

		this.components = components;
		this.componentsExists = true;

		this.title = title;
		this.titleExists = true;

		this.tag = tag;
		this.tagExists = true;

		this.tag1 = tag1;
		this.tag1Exists = true;

		this.tag2 = tag2;
		this.tag2Exists = true;

		this.tag3 = tag3;
		this.tag3Exists = true;

		this.tag4 = tag4;
		this.tag4Exists = true;

		this.tag5 = tag5;
		this.tag5Exists = true;

		this.tag6 = tag6;
		this.tag6Exists = true;
	}


}




public class PUSliderBase : PUImage {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);




	// XML Attributes
	public string handleResourcePath;
	public bool handleResourcePathExists;

	public Vector2 handleSize;
	public bool handleSizeExists;

	public string fillResourcePath;
	public bool fillResourcePathExists;

	public string onValueChanged;
	public bool onValueChangedExists;

	public float minValue;
	public bool minValueExists;

	public float maxValue;
	public bool maxValueExists;

	public PlanetUnity2.SliderDirection direction;
	public bool directionExists;




	
	public void SetHandleResourcePath(string v) { handleResourcePath = v; handleResourcePathExists = true; } 
	public void SetHandleSize(Vector2 v) { handleSize = v; handleSizeExists = true; } 
	public void SetFillResourcePath(string v) { fillResourcePath = v; fillResourcePathExists = true; } 
	public void SetOnValueChanged(string v) { onValueChanged = v; onValueChangedExists = true; } 
	public void SetMinValue(float v) { minValue = v; minValueExists = true; } 
	public void SetMaxValue(float v) { maxValue = v; maxValueExists = true; } 
	public void SetDirection(PlanetUnity2.SliderDirection v) { direction = v; directionExists = true; } 


	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Slider");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("SliderExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("Sliders");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("Images");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public override void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{
		base.gaxb_load(reader, _parent, args);

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( PUSlider ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("handleResourcePath");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { handleResourcePath = attr; handleResourcePathExists = true; } 
		
		attr = reader.GetAttribute("handleSize");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "32,32"; }
		if(attr != null) { handleSize = new Vector2().PUParse(attr); handleSizeExists = true; } 
		
		attr = reader.GetAttribute("fillResourcePath");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { fillResourcePath = attr; fillResourcePathExists = true; } 
		
		attr = reader.GetAttribute("onValueChanged");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { onValueChanged = attr; onValueChangedExists = true; } 
		
		attr = reader.GetAttribute("minValue");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0"; }
		if(attr != null) { minValue = float.Parse(attr); minValueExists = true; } 
		
		attr = reader.GetAttribute("maxValue");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "1"; }
		if(attr != null) { maxValue = float.Parse(attr); maxValueExists = true; } 
		
		attr = reader.GetAttribute("direction");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { direction = (PlanetUnity2.SliderDirection)System.Enum.Parse(typeof(PlanetUnity2.SliderDirection), attr); directionExists = true; } 
		

	}
	
	
	
	
	
	
	
	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(handleResourcePathExists) { sb.AppendFormat (" {0}=\"{1}\"", "handleResourcePath", handleResourcePath); }
		if(handleSizeExists) { sb.AppendFormat (" {0}=\"{1}\"", "handleSize", handleSize); }
		if(fillResourcePathExists) { sb.AppendFormat (" {0}=\"{1}\"", "fillResourcePath", fillResourcePath); }
		if(onValueChangedExists) { sb.AppendFormat (" {0}=\"{1}\"", "onValueChanged", onValueChanged); }
		if(minValueExists) { sb.AppendFormat (" {0}=\"{1}\"", "minValue", minValue.ToString ("0.##")); }
		if(maxValueExists) { sb.AppendFormat (" {0}=\"{1}\"", "maxValue", maxValue.ToString ("0.##")); }
		if(directionExists) { sb.AppendFormat (" {0}=\"{1}\"", "direction", (int)direction); }

	}
	
	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}
	
	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "Slider");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Slider");
		}
	}
}
