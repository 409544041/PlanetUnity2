

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class PUHorizontalLayoutGroup : PUHorizontalLayoutGroupBase {
	
	public PUHorizontalLayoutGroup()
	{
		string attr;

		attr = "0";
		if(attr != null) { spacing = float.Parse(attr); spacingExists = true; } 
		attr = "0,0,0,0";
		if(attr != null) { padding = new Vector4().PUParse(attr); paddingExists = true; } 

	}
	
	
	public PUHorizontalLayoutGroup(
			float spacing,
			Vector4 padding,
			PlanetUnity2.GridLayoutChildAlignment childAlignment ) : this()
	{
		this.spacing = spacing;
		this.spacingExists = true;

		this.padding = padding;
		this.paddingExists = true;

		this.childAlignment = childAlignment;
		this.childAlignmentExists = true;
	}

	
	
	public PUHorizontalLayoutGroup(
			float spacing,
			Vector4 padding,
			PlanetUnity2.GridLayoutChildAlignment childAlignment,
			Vector4 bounds,
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool active,
			bool mask,
			float lastY,
			float lastX,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.spacing = spacing;
		this.spacingExists = true;

		this.padding = padding;
		this.paddingExists = true;

		this.childAlignment = childAlignment;
		this.childAlignmentExists = true;

		this.bounds = bounds;
		this.boundsExists = true;

		this.position = position;
		this.positionExists = true;

		this.size = size;
		this.sizeExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.scale = scale;
		this.scaleExists = true;

		this.pivot = pivot;
		this.pivotExists = true;

		this.anchor = anchor;
		this.anchorExists = true;

		this.active = active;
		this.activeExists = true;

		this.mask = mask;
		this.maskExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.title = title;
		this.titleExists = true;

		this.tag = tag;
		this.tagExists = true;

		this.tag1 = tag1;
		this.tag1Exists = true;

		this.tag2 = tag2;
		this.tag2Exists = true;

		this.tag3 = tag3;
		this.tag3Exists = true;

		this.tag4 = tag4;
		this.tag4Exists = true;

		this.tag5 = tag5;
		this.tag5Exists = true;

		this.tag6 = tag6;
		this.tag6Exists = true;
	}


}




public class PUHorizontalLayoutGroupBase : PUGameObject {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);




	// XML Attributes
	public float spacing;
	public bool spacingExists;

	public Vector4 padding;
	public bool paddingExists;

	public PlanetUnity2.GridLayoutChildAlignment childAlignment;
	public bool childAlignmentExists;




	
	public void SetSpacing(float v) { spacing = v; spacingExists = true; } 
	public void SetPadding(Vector4 v) { padding = v; paddingExists = true; } 
	public void SetChildAlignment(PlanetUnity2.GridLayoutChildAlignment v) { childAlignment = v; childAlignmentExists = true; } 


	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("HorizontalLayoutGroup");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("HorizontalLayoutGroupExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("HorizontalLayoutGroups");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("GameObjects");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public override void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{
		base.gaxb_load(reader, _parent, args);

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( PUHorizontalLayoutGroup ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("spacing");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0"; }
		if(attr != null) { spacing = float.Parse(attr); spacingExists = true; } 
		
		attr = reader.GetAttribute("padding");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0,0,0"; }
		if(attr != null) { padding = new Vector4().PUParse(attr); paddingExists = true; } 
		
		attr = reader.GetAttribute("childAlignment");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { childAlignment = (PlanetUnity2.GridLayoutChildAlignment)System.Enum.Parse(typeof(PlanetUnity2.GridLayoutChildAlignment), attr); childAlignmentExists = true; } 
		

	}
	
	
	
	
	
	
	
	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(spacingExists) { sb.AppendFormat (" {0}=\"{1}\"", "spacing", spacing.ToString ("0.##")); }
		if(paddingExists) { sb.AppendFormat (" {0}=\"{1}\"", "padding", padding); }
		if(childAlignmentExists) { sb.AppendFormat (" {0}=\"{1}\"", "childAlignment", (int)childAlignment); }

	}
	
	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}
	
	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "HorizontalLayoutGroup");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "HorizontalLayoutGroup");
		}
	}
}
