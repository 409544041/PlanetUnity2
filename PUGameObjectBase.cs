

using UnityEngine;


//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class PUGameObject : PUGameObjectBase {
	
	public PUGameObject()
	{
		string attr;

		attr = "0,0,0";
		if(attr != null) { position = new Vector3().PUParse(attr); positionExists = true; } 
		attr = "0,0";
		if(attr != null) { size = new Vector2().PUParse(attr); sizeExists = true; } 
		attr = "0,0,0";
		if(attr != null) { rotation = new Vector3().PUParse(attr); rotationExists = true; } 
		attr = "1,1,1";
		if(attr != null) { scale = new Vector3().PUParse(attr); scaleExists = true; } 
		attr = "0,0";
		if(attr != null) { pivot = new Vector2().PUParse(attr); pivotExists = true; } 
		attr = "bottom,left";
		if(attr != null) { anchor = attr; anchorExists = true; } 

	}
	
	
	public PUGameObject(
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool hidden,
			float lastY,
			float lastX ) : this()
	{
		this.position = position;
		this.positionExists = true;

		this.size = size;
		this.sizeExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.scale = scale;
		this.scaleExists = true;

		this.pivot = pivot;
		this.pivotExists = true;

		this.anchor = anchor;
		this.anchorExists = true;

		this.hidden = hidden;
		this.hiddenExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;
	}

	
	
	public PUGameObject(
			Vector3 position,
			Vector2 size,
			Vector3 rotation,
			Vector3 scale,
			Vector2 pivot,
			string anchor,
			bool hidden,
			float lastY,
			float lastX,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.position = position;
		this.positionExists = true;

		this.size = size;
		this.sizeExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.scale = scale;
		this.scaleExists = true;

		this.pivot = pivot;
		this.pivotExists = true;

		this.anchor = anchor;
		this.anchorExists = true;

		this.hidden = hidden;
		this.hiddenExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.title = title;
		this.titleExists = true;

		this.tag = tag;
		this.tagExists = true;

		this.tag1 = tag1;
		this.tag1Exists = true;

		this.tag2 = tag2;
		this.tag2Exists = true;

		this.tag3 = tag3;
		this.tag3Exists = true;

		this.tag4 = tag4;
		this.tag4Exists = true;

		this.tag5 = tag5;
		this.tag5Exists = true;

		this.tag6 = tag6;
		this.tag6Exists = true;
	}


}




public class PUGameObjectBase : PUObject {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);




	// XML Attributes
	public Vector3 position;
	public bool positionExists;

	public Vector2 size;
	public bool sizeExists;

	public Vector3 rotation;
	public bool rotationExists;

	public Vector3 scale;
	public bool scaleExists;

	public Vector2 pivot;
	public bool pivotExists;

	public string anchor;
	public bool anchorExists;

	public bool hidden;
	public bool hiddenExists;

	public float lastY;
	public bool lastYExists;

	public float lastX;
	public bool lastXExists;




	
	public void SetPosition(Vector3 v) { position = v; positionExists = true; } 
	public void SetSize(Vector2 v) { size = v; sizeExists = true; } 
	public void SetRotation(Vector3 v) { rotation = v; rotationExists = true; } 
	public void SetScale(Vector3 v) { scale = v; scaleExists = true; } 
	public void SetPivot(Vector2 v) { pivot = v; pivotExists = true; } 
	public void SetAnchor(string v) { anchor = v; anchorExists = true; } 
	public void SetHidden(bool v) { hidden = v; hiddenExists = true; } 
	public void SetLastY(float v) { lastY = v; lastYExists = true; } 
	public void SetLastX(float v) { lastX = v; lastXExists = true; } 


	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("GameObject");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("GameObjectExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("GameObjects");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("Objects");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public override void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{
		base.gaxb_load(reader, _parent, args);

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( PUGameObject ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("position");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0,0"; }
		if(attr != null) { position = new Vector3().PUParse(attr); positionExists = true; } 
		
		attr = reader.GetAttribute("size");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0"; }
		if(attr != null) { size = new Vector2().PUParse(attr); sizeExists = true; } 
		
		attr = reader.GetAttribute("rotation");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0,0"; }
		if(attr != null) { rotation = new Vector3().PUParse(attr); rotationExists = true; } 
		
		attr = reader.GetAttribute("scale");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "1,1,1"; }
		if(attr != null) { scale = new Vector3().PUParse(attr); scaleExists = true; } 
		
		attr = reader.GetAttribute("pivot");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0"; }
		if(attr != null) { pivot = new Vector2().PUParse(attr); pivotExists = true; } 
		
		attr = reader.GetAttribute("anchor");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "bottom,left"; }
		if(attr != null) { anchor = attr; anchorExists = true; } 
		
		attr = reader.GetAttribute("hidden");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { hidden = bool.Parse(attr); hiddenExists = true; } 
		
		attr = reader.GetAttribute("lastY");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { lastY = float.Parse(attr); lastYExists = true; } 
		
		attr = reader.GetAttribute("lastX");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { lastX = float.Parse(attr); lastXExists = true; } 
		

	}
	
	
	
	
	
	
	
	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(positionExists) { sb.AppendFormat (" {0}=\"{1}\"", "position", position); }
		if(sizeExists) { sb.AppendFormat (" {0}=\"{1}\"", "size", size); }
		if(rotationExists) { sb.AppendFormat (" {0}=\"{1}\"", "rotation", rotation); }
		if(scaleExists) { sb.AppendFormat (" {0}=\"{1}\"", "scale", scale); }
		if(pivotExists) { sb.AppendFormat (" {0}=\"{1}\"", "pivot", pivot); }
		if(anchorExists) { sb.AppendFormat (" {0}=\"{1}\"", "anchor", anchor); }
		if(hiddenExists) { sb.AppendFormat (" {0}=\"{1}\"", "hidden", hidden.ToString().ToLower()); }
		if(lastYExists) { sb.AppendFormat (" {0}=\"{1}\"", "lastY", lastY.ToString ("0.##")); }
		if(lastXExists) { sb.AppendFormat (" {0}=\"{1}\"", "lastX", lastX.ToString ("0.##")); }

	}
	
	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}
	
	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "GameObject");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "GameObject");
		}
	}
}
